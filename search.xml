<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python面向对象程序编程学习</title>
    <url>/2022/08/18/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[</font>

<p>@<a href="Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">TOC</a></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >接上篇<a href="https://blog.csdn.net/a_growing_tree/article/details/122598983">Python函数及函数式编程</a>，打卡~<br>简述面向对象编程思想：按照真实客观世界客观事物的自然规律进行分析，客观世界中存在什么样的实例，构建的软件系统就会存在什么样的实体。</font></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<p><font color=#999AAA >注意：类名采用大驼峰命名法（英文单词首字母大写），例如：ClassRroom。</p>
<h1 id="1-1-面向对象的三个基本特征"><a href="#1-1-面向对象的三个基本特征" class="headerlink" title="1.1 面向对象的三个基本特征"></a>1.1 面向对象的三个基本特征</h1><h2 id="1-1-1-封装性"><a href="#1-1-1-封装性" class="headerlink" title="1.1.1 封装性"></a>1.1.1 封装性</h2><p>封装能够使外部访问者不能随意存取对象的内部数据，隐藏了对象内部的细节，只保留有限的对外接口。外部访问者不用关心对象的内部细节，操作对象变得简单。</p>
<h2 id="1-1-2-继承性"><a href="#1-1-2-继承性" class="headerlink" title="1.1.2 继承性"></a>1.1.2 继承性</h2><p>在面向对象中分为一般类和特殊类。特殊类拥有一般类的全部数据和操作，称为特殊类继承一般类。一般类称为“父类”或“超类”，特殊类称为“子类”或“派生类”。</p>
<h2 id="1-1-3-多态性"><a href="#1-1-3-多态性" class="headerlink" title="1.1.3 多态性"></a>1.1.3 多态性</h2><p>多态性是指在父类中成员被子类继承之后，可以具有不同的状态或表现行为。</p>
<h1 id="2-1-类和对象"><a href="#2-1-类和对象" class="headerlink" title="2.1 类和对象"></a>2.1 类和对象</h1><p>Python中的数据类型都是类，类是组成Python程序的基本元素，它封装了一个类对象的数据和操作。</p>
<h2 id="2-1-1-定义类"><a href="#2-1-1-定义类" class="headerlink" title="2.1.1 定义类"></a>2.1.1 定义类</h2><p>Python语言中一个类的定义包括类定义和类体。格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">	<span class="comment">#类体</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>上述代码声明了动物类，它继承了object类，object是所有类的根类，在Python中任何一个动物类都直接或间接继承object，所以(object)部分代码可以省略。</p>
<p>&#x3D;&#x3D;注意：代码的pass语句什么操作都不执行，用来维持程序结构的完整。有些不想编写的代码，又不想有语法错误，可以使用pass语句占位。&#x3D;&#x3D;</p>
<h2 id="2-1-2-创建和使用对象"><a href="#2-1-2-创建和使用对象" class="headerlink" title="2.1.2 创建和使用对象"></a>2.1.2 创建和使用对象</h2><p>“对象”也可称为“实例”。一个对象的生命周期包括三个阶段：创建、使用和销毁。销毁对象时Python的垃圾回收机制释放不再使用的对象的内存，不需要程序员负责。</p>
<p>创建对象的语法很简单，只需在类后面加上一对小括号，表示调用类的构造方法。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animal = Animal()</span><br></pre></td></tr></table></figure>
<p>这样就创建好了，通过animal变量可以使用刚刚创建的动物对象。</p>
<h2 id="2-1-3-实例变量"><a href="#2-1-3-实例变量" class="headerlink" title="2.1.3 实例变量"></a>2.1.3 实例变量</h2><p>在类体中可以包含类的成员，类方法如下图所示，其中包括成员变量、成员方法和属性，成员变量又分为实例变量和类变量，成员方法又分为实例方法、类方法和静态方法。</p>
<p><img src="https://img-blog.csdnimg.cn/3fbfe7f1c47e4f12a22ef9c6285bcd45.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYV9ncm93aW5nX3RyZWU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>“实例变量”就是某个实例（或对象）个体特有的“数据”，例如你家狗狗的名字、年龄和性别与邻居家的狗狗的名字、年龄和性别是不一样的。<br>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex,weight</span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line">dog1 = Animal(<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;年龄: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(dog1.age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;性别: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(dog1.sex))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;体重: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(dog1.weight))</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">年龄: <span class="number">2</span></span><br><span class="line">性别: <span class="number">1</span></span><br><span class="line">体重: <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>构造方法是用来创建和初始化实例变量的，有关构造方法下文中会提及。构造方法中的self指向当前对象实例的应用。其中self.age表示对象的age实例变量。访问age实例变量需要通过“实例名.变量名”的形式访问。</p>
<h2 id="2-1-4-类变量"><a href="#2-1-4-类变量" class="headerlink" title="2.1.4 类变量"></a>2.1.4 类变量</h2><p>“类变量”是所有实例变量共有的变量。例如有一个Account（银行账户）类，它有三个成员变量 : amount（账户金额）、interest_rate（利率）和owner（账户名）。在这三个成员变量中，amount和owner会因人而异，但是所有账户的interest_rate都是相同的。amount和owner成员变量与账户个体实例有关，称为“实体变量”，interest_rate成员变量与个体实例无关，或者说是个体实例共有的，这个变量被称为“类变量”。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义银行账户类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    interest_rate = <span class="number">0.0668</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,owner,amount</span>):</span><br><span class="line">        self.owner = owner    <span class="comment">#定义实例变量账户名</span></span><br><span class="line">        self.amount = amount  <span class="comment">#定义实例变量账户金额</span></span><br><span class="line"></span><br><span class="line">account1 = Account(<span class="string">&#x27;Tony&#x27;</span>,<span class="number">18000.0</span>)</span><br><span class="line">account2 = Account(<span class="string">&#x27;Amy&#x27;</span>,<span class="number">24000.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;账户&#123;0&#125;的金额为&#123;1&#125;,年利率为&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(account1.owner,account1.amount,account1.interest_rate))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;账户&#123;0&#125;的金额为&#123;1&#125;,年利率为&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(account2.owner,account2.amount,account2.interest_rate))</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">账户Tony的金额为<span class="number">18000.0</span>,年利率为<span class="number">0.0668</span></span><br><span class="line">账户Amy的金额为<span class="number">24000.0</span>,年利率为<span class="number">0.0668</span></span><br></pre></td></tr></table></figure>
<p>可以看到类变量是所有实例变量所共有的。</p>
<p>&#x3D;&#x3D;注意：不要通过实例存取类变量数据。当通过实例读取变量时，Python解释器会在实例中找这个变量，如果没有找到，再去类中找；当通过实例为变量赋值时，无论类中有没有该同名变量，Python解释器都会创建一个同名实例变量。&#x3D;&#x3D;</p>
<h2 id="2-1-5-构造方法"><a href="#2-1-5-构造方法" class="headerlink" title="2.1.5 构造方法"></a>2.1.5 构造方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__()</span><br></pre></td></tr></table></figure>
<p>该方法用来创建和初始化实例变量，这种方法是“构造方法”，也属于魔法方法。定义时，它的第一个参数应该是self，其后的参数才是用来初始化实例变量的。调用构造方法时不需要传入self。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line">dog1 = Animal(<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">dog2 = Animal(<span class="number">1</span>,weight = <span class="number">10</span>)</span><br><span class="line">dog3 = Animal(<span class="number">1</span>,sex = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dog1年龄: &#123;0&#125;,性别:&#123;1&#125;，体重:&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(dog1.age,dog1.sex,dog1.weight))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dog2年龄: &#123;0&#125;，体重:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(dog2.age,dog2.weight))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dog3年龄: &#123;0&#125;,性别:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(dog3.age,dog3.sex))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dog1年龄: <span class="number">2</span>,性别:<span class="number">1</span>，体重:<span class="number">5</span></span><br><span class="line">dog2年龄: <span class="number">1</span>，体重:<span class="number">10</span></span><br><span class="line">dog3年龄: <span class="number">1</span>,性别:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>不需要传入self，只需要提供后面三个实际参数。</p>
<h2 id="2-1-6-实例方法"><a href="#2-1-6-实例方法" class="headerlink" title="2.1.6 实例方法"></a>2.1.6 实例方法</h2><p>实例方法和实例对象都是某个实例所特有的。<br>方法是在类中定义的函数。而定义实例方法时它的第一个参数也应该是self，这个过程是将当前实例与该方法绑定起来，使之成为实例方法。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.05</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight -= <span class="number">0.01</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a1 = Animal(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.eat()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.run()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1体重：<span class="number">10.00</span></span><br><span class="line">eat...</span><br><span class="line">a1体重：<span class="number">10.05</span></span><br><span class="line">run...</span><br><span class="line">a1体重：<span class="number">10.04</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-7-类方法"><a href="#2-1-7-类方法" class="headerlink" title="2.1.7 类方法"></a>2.1.7 类方法</h2><p>“类方法”与“类变量”类似，属于类而不属于个体实例方法，类方法不需要与实力绑定，但需要与类绑定，定义是它的第一个参数不是self，而是类的type实例。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义银行账户类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    interest_rate = <span class="number">0.0668</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,owner,amount</span>):</span><br><span class="line">        self.owner = owner    <span class="comment">#定义实例变量账户名</span></span><br><span class="line">        self.amount = amount  <span class="comment">#定义实例变量账户金额</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest_by</span>(<span class="params">cls,amt</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.interest_rate * amt</span><br><span class="line"></span><br><span class="line">interest = Account.interest_by(<span class="number">12000.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算利息：&#123;0:0.4f&#125;&#x27;</span>.<span class="built_in">format</span>(interest))</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">计算利息：<span class="number">801.6000</span></span><br></pre></td></tr></table></figure>
<p>定义类方法有两个关键：第一，方法的第一个参数cls是type类型的一个实例；第二，方法使用装饰器@classmethod声明该方法是类方法。</p>
<p>&#x3D;&#x3D;注意：类方法可以访问类变量和其他类方法，但不能访问其他实例方法和实例变量&#x3D;&#x3D;</p>
<h2 id="2-1-8-静态方法"><a href="#2-1-8-静态方法" class="headerlink" title="2.1.8 静态方法"></a>2.1.8 静态方法</h2><p>如果定义的方法既不想与实例绑定，也不想与类绑定，只是想把类作为它的命名空间，那么可以用静态发方法。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义银行账户类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    interest_rate = <span class="number">0.0668</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,owner,amount</span>):</span><br><span class="line">        self.owner = owner    <span class="comment">#定义实例变量账户名</span></span><br><span class="line">        self.amount = amount  <span class="comment">#定义实例变量账户金额</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest_by</span>(<span class="params">cls,amt</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.interest_rate * amt</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest_with</span>(<span class="params">amt</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.interest_by(amt)</span><br><span class="line"></span><br><span class="line">interest1 = Account.interest_by(<span class="number">12000.0</span>)</span><br><span class="line">interest2 = Account.interest_with(<span class="number">12000.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算利息：&#123;0:0.4f&#125;&#x27;</span>.<span class="built_in">format</span>(interest1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算利息：&#123;0:0.4f&#125;&#x27;</span>.<span class="built_in">format</span>(interest2))</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">计算利息：<span class="number">801.6000</span></span><br><span class="line">计算利息：<span class="number">801.6000</span></span><br></pre></td></tr></table></figure>
<p>使用了@staticmethod装饰器，声明该方法是静态方法，方法参数不需要指定self和csl。</p>
<h1 id="3-1封装性"><a href="#3-1封装性" class="headerlink" title="3.1封装性"></a>3.1封装性</h1><h2 id="3-1-1-私有变量"><a href="#3-1-1-私有变量" class="headerlink" title="3.1.1 私有变量"></a>3.1.1 私有变量</h2><p>默认情况下Python中的变量是共有的，可以在类的外部访问它们。如果想让他们成为私有变量，可以在变量前加上双下划线”__”。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.__weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.__weight += <span class="number">0.05</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.__weight -= <span class="number">0.01</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a1 = Animal(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.eat()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.run()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/SZN/Desktop/test.py&quot;</span>, line <span class="number">18</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">AttributeError: <span class="string">&#x27;Animal&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;weight&#x27;</span></span><br></pre></td></tr></table></figure>
<p>__weight变量在类内部访问没有问题，但是如果在外部访问则会发生错误。</p>
<p>&#x3D;&#x3D;注意：如果想在外部访问私有变量也是可以的，只需要将访问的格式改为“_类名___变量”。所以将上述代码a1.weight改为<code>a1_Animal__weight</code>就可以访问了。但是及不推荐这样做，会破坏封装性&#x3D;&#x3D;</p>
<h2 id="3-1-2-私有方法"><a href="#3-1-2-私有方法" class="headerlink" title="3.1.2 私有方法"></a>3.1.2 私有方法</h2><p>原理同私有变量。<br>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.__weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.__weight += <span class="number">0.05</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__run</span>(<span class="params">self</span>):</span><br><span class="line">        self.__weight -= <span class="number">0.01</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a1 = Animal(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.eat()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line">a1.run()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a1体重：&#123;0:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a1.weight))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eat...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/SZN/Desktop/test.py&quot;</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a1.run()</span><br><span class="line">AttributeError: <span class="string">&#x27;Animal&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;run&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-3-定义属性"><a href="#3-1-3-定义属性" class="headerlink" title="3.1.3 定义属性"></a>3.1.3 定义属性</h2><p>封装通常是对成员变量的封装。在严格意义上的面对对象设计中，一个类是不应该有共有实例成员变量的，这些实例成员变量应该被设计成为私有的，然后通过共有的setter和getter访问器访问。<br>但是访问器形式封装在编写代码时比较麻烦。为了解决这个问题，Python中提供了属性，定义属性可以使用@property和@属性名.setter装饰器。@property用来修饰getter访问器，@属性名.setter用来修饰setter访问器。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.__weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__weight</span><br><span class="line"></span><br><span class="line"><span class="meta">    @weight.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weight</span>(<span class="params">self,weight</span>):</span><br><span class="line">        self.__weight = weight</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1体重：<span class="number">10.00</span></span><br><span class="line">a1体重：<span class="number">123.45</span></span><br></pre></td></tr></table></figure>

<h1 id="4-1-继承性"><a href="#4-1-继承性" class="headerlink" title="4.1 继承性"></a>4.1 继承性</h1><h2 id="4-1-1-继承性的概念"><a href="#4-1-1-继承性的概念" class="headerlink" title="4.1.1 继承性的概念"></a>4.1.1 继承性的概念</h2><p>上栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;继承动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex = <span class="number">1</span>,weight = <span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(age,sex,weight)</span><br><span class="line">        self.name = name</span><br><span class="line">dog1 = Dog(<span class="string">&#x27;Lucky&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">dog2 = Dog(<span class="string">&#x27;Bob&#x27;</span>,<span class="number">1</span>,weight = <span class="number">10</span>)</span><br><span class="line">dog3 = Dog(<span class="string">&#x27;Lucy&#x27;</span>,<span class="number">1</span>,sex = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;年龄: &#123;1&#125;,性别:&#123;2&#125;，体重:&#123;3&#125;&#x27;</span>.<span class="built_in">format</span>(dog1.name,dog1.age,dog1.sex,dog1.weight))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;年龄: &#123;1&#125;，体重:&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(dog2.name,dog2.age,dog2.weight))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;年龄: &#123;1&#125;,性别:&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(dog3.name,dog3.age,dog3.sex))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Lucky年龄: <span class="number">2</span>,性别:<span class="number">1</span>，体重:<span class="number">5</span></span><br><span class="line">Bob年龄: <span class="number">1</span>，体重:<span class="number">10</span></span><br><span class="line">Lucy年龄: <span class="number">1</span>,性别:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Dog类继承Animal类，其中小括号中的是父类，如果没有指明父类（一对空的小括号或者省略小括号），则默认父类为object，object类是Python的根类。子类中定义构造方法时首先要调用父类的构造方法，初始化父类变量。<code>super().__init__(age,sex,weight)</code>就是调用父类的构造方法，super()函数时返回父类的引用，通过它可以调用父类中的实例变量和方法。</p>
<p>&#x3D;&#x3D;注意：子类继承父类时只是继承父类中公有的成员变量和方法，不能继承私有的成员变量和方法。&#x3D;&#x3D;</p>
<h2 id="4-1-2-重写方法"><a href="#4-1-2-重写方法" class="headerlink" title="4.1.2 重写方法"></a>4.1.2 重写方法</h2><p>如果子类方法名与父类方法名相同，而参数列表也相同，只是方法体不同，那么子类重写了父类的方法。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.05</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal eat...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;继承动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex = <span class="number">1</span>,weight = <span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(age,sex,weight)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.03</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog eat...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">dog1 = Dog(<span class="string">&#x27;Lucky&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">dog1.eat()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Dog eat...</span><br></pre></td></tr></table></figure>
<p>可见子类重写了父类的方法，通过子类实例调用eat()方法时，会调用子类重写的eat()。</p>
<h2 id="4-1-3-多继承性"><a href="#4-1-3-多继承性" class="headerlink" title="4.1.3 多继承性"></a>4.1.3 多继承性</h2><p>就是一个子类可以有多个父类。当子类实例调用一个方法时，先从子类中查找，如果没有找到则查找父类。父类的查找顺序是按照子类声明的父类列表从左往右查找，如果没有找到再找父类的父类，依次查找下去。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ParentClass1 run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ParentClass2 run...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass1</span>(ParentClass2,ParentClass1):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">sub1 = SubClass1()</span><br><span class="line">sub1.run()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ParentClass2 run...</span><br></pre></td></tr></table></figure>

<h1 id="5-1-多态性"><a href="#5-1-多态性" class="headerlink" title="5.1 多态性"></a>5.1 多态性</h1><h2 id="5-1-1-多态概念"><a href="#5-1-1-多态概念" class="headerlink" title="5.1.1 多态概念"></a>5.1.1 多态概念</h2><p>发生多态要有两个前提条件：<br><em>继承——多态发生一定是再子类和父类之间。</em><br><em>重写——子类重写父类的方法。</em></p>
<h2 id="5-1-2-类型检查"><a href="#5-1-2-类型检查" class="headerlink" title="5.1.2 类型检查"></a>5.1.2 类型检查</h2><p>运行期类型检查使用isinstance(object,classinfo)函数，它可以检查object实例是否由classinfo类或classinfo子类所创建的实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;定义动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,sex = <span class="number">1</span>,weight =<span class="number">0.0</span></span>):</span><br><span class="line">        self.age = age    <span class="comment">#定义年龄实例变量</span></span><br><span class="line">        self.sex = sex    <span class="comment">#定义性别实例变量</span></span><br><span class="line">        self.weight = weight  <span class="comment">#定义体重实例变量</span></span><br><span class="line">	    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.05</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight -= <span class="number">0.01</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;继承动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex = <span class="number">1</span>,weight = <span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(age,sex,weight)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.03</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight -= <span class="number">0.02</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog run...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;继承动物类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex = <span class="number">1</span>,weight = <span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(age,sex,weight)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight += <span class="number">0.03</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cat eat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.weight -= <span class="number">0.02</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cat run...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">a1 = Animal(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line">a2 = Dog(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line">a3 = Cat(<span class="number">2</span>,<span class="number">0</span>,<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a1,Dog))  <span class="comment">#没有发生多态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a2,Dog))  <span class="comment">#发生多态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a3,Dog))  <span class="comment">#没有发生多态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a2,Animal))  <span class="comment">#发生多态</span></span><br></pre></td></tr></table></figure>
<p>运行结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><font color=#999AAA >今天就学到这里了</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color=#999AAA >
以上就是今天学习的内容，自己在学习的时候还是有点懵的，还需要多加以运用。上文如有错误，希望各位大佬值正。]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
